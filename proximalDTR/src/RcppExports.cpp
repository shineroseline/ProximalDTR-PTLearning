// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// KernelDist_single
arma::mat KernelDist_single(const arma::mat& X, const arma::vec& A, double diag, double bw, double bw_A);
RcppExport SEXP _proximalDTR_KernelDist_single(SEXP XSEXP, SEXP ASEXP, SEXP diagSEXP, SEXP bwSEXP, SEXP bw_ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type diag(diagSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< double >::type bw_A(bw_ASEXP);
    rcpp_result_gen = Rcpp::wrap(KernelDist_single(X, A, diag, bw, bw_A));
    return rcpp_result_gen;
END_RCPP
}
// EpanKernelDist_single
arma::mat EpanKernelDist_single(const arma::mat& X, double diag);
RcppExport SEXP _proximalDTR_EpanKernelDist_single(SEXP XSEXP, SEXP diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type diag(diagSEXP);
    rcpp_result_gen = Rcpp::wrap(EpanKernelDist_single(X, diag));
    return rcpp_result_gen;
END_RCPP
}
// Basis_func
arma::rowvec Basis_func(const arma::rowvec& X_tmp, const int A_tmp, const arma::colvec& A_type, double node1, double node2, double node3, double node4, double node5, double node6);
RcppExport SEXP _proximalDTR_Basis_func(SEXP X_tmpSEXP, SEXP A_tmpSEXP, SEXP A_typeSEXP, SEXP node1SEXP, SEXP node2SEXP, SEXP node3SEXP, SEXP node4SEXP, SEXP node5SEXP, SEXP node6SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X_tmp(X_tmpSEXP);
    Rcpp::traits::input_parameter< const int >::type A_tmp(A_tmpSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type A_type(A_typeSEXP);
    Rcpp::traits::input_parameter< double >::type node1(node1SEXP);
    Rcpp::traits::input_parameter< double >::type node2(node2SEXP);
    Rcpp::traits::input_parameter< double >::type node3(node3SEXP);
    Rcpp::traits::input_parameter< double >::type node4(node4SEXP);
    Rcpp::traits::input_parameter< double >::type node5(node5SEXP);
    Rcpp::traits::input_parameter< double >::type node6(node6SEXP);
    rcpp_result_gen = Rcpp::wrap(Basis_func(X_tmp, A_tmp, A_type, node1, node2, node3, node4, node5, node6));
    return rcpp_result_gen;
END_RCPP
}
// V_func
double V_func(const arma::rowvec& X_tmp, const arma::colvec& A_type, const arma::mat& beta, double lambda, double node1, double node2, double node3, double node4, double node5, double node6);
RcppExport SEXP _proximalDTR_V_func(SEXP X_tmpSEXP, SEXP A_typeSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP node1SEXP, SEXP node2SEXP, SEXP node3SEXP, SEXP node4SEXP, SEXP node5SEXP, SEXP node6SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X_tmp(X_tmpSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type A_type(A_typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type node1(node1SEXP);
    Rcpp::traits::input_parameter< double >::type node2(node2SEXP);
    Rcpp::traits::input_parameter< double >::type node3(node3SEXP);
    Rcpp::traits::input_parameter< double >::type node4(node4SEXP);
    Rcpp::traits::input_parameter< double >::type node5(node5SEXP);
    Rcpp::traits::input_parameter< double >::type node6(node6SEXP);
    rcpp_result_gen = Rcpp::wrap(V_func(X_tmp, A_type, beta, lambda, node1, node2, node3, node4, node5, node6));
    return rcpp_result_gen;
END_RCPP
}
// V_grad
arma::rowvec V_grad(const arma::rowvec& X_tmp, const arma::colvec& A_type, const arma::mat& beta, double lambda, double node1, double node2, double node3, double node4, double node5, double node6, int X_size);
RcppExport SEXP _proximalDTR_V_grad(SEXP X_tmpSEXP, SEXP A_typeSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP node1SEXP, SEXP node2SEXP, SEXP node3SEXP, SEXP node4SEXP, SEXP node5SEXP, SEXP node6SEXP, SEXP X_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X_tmp(X_tmpSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type A_type(A_typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type node1(node1SEXP);
    Rcpp::traits::input_parameter< double >::type node2(node2SEXP);
    Rcpp::traits::input_parameter< double >::type node3(node3SEXP);
    Rcpp::traits::input_parameter< double >::type node4(node4SEXP);
    Rcpp::traits::input_parameter< double >::type node5(node5SEXP);
    Rcpp::traits::input_parameter< double >::type node6(node6SEXP);
    Rcpp::traits::input_parameter< int >::type X_size(X_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(V_grad(X_tmp, A_type, beta, lambda, node1, node2, node3, node4, node5, node6, X_size));
    return rcpp_result_gen;
END_RCPP
}
// Pi_policy
double Pi_policy(const int A_tmp, const arma::rowvec& X_tmp, const arma::colvec& A_type, const arma::mat& beta, double lambda, double node1, double node2, double node3, double node4, double node5, double node6);
RcppExport SEXP _proximalDTR_Pi_policy(SEXP A_tmpSEXP, SEXP X_tmpSEXP, SEXP A_typeSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP node1SEXP, SEXP node2SEXP, SEXP node3SEXP, SEXP node4SEXP, SEXP node5SEXP, SEXP node6SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type A_tmp(A_tmpSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X_tmp(X_tmpSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type A_type(A_typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type node1(node1SEXP);
    Rcpp::traits::input_parameter< double >::type node2(node2SEXP);
    Rcpp::traits::input_parameter< double >::type node3(node3SEXP);
    Rcpp::traits::input_parameter< double >::type node4(node4SEXP);
    Rcpp::traits::input_parameter< double >::type node5(node5SEXP);
    Rcpp::traits::input_parameter< double >::type node6(node6SEXP);
    rcpp_result_gen = Rcpp::wrap(Pi_policy(A_tmp, X_tmp, A_type, beta, lambda, node1, node2, node3, node4, node5, node6));
    return rcpp_result_gen;
END_RCPP
}
// Pi_grad
arma::rowvec Pi_grad(const int A_tmp, const arma::rowvec& X_tmp, const arma::colvec& A_type, const arma::mat& beta, double lambda, double node1, double node2, double node3, double node4, double node5, double node6, int X_size);
RcppExport SEXP _proximalDTR_Pi_grad(SEXP A_tmpSEXP, SEXP X_tmpSEXP, SEXP A_typeSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP node1SEXP, SEXP node2SEXP, SEXP node3SEXP, SEXP node4SEXP, SEXP node5SEXP, SEXP node6SEXP, SEXP X_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type A_tmp(A_tmpSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X_tmp(X_tmpSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type A_type(A_typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type node1(node1SEXP);
    Rcpp::traits::input_parameter< double >::type node2(node2SEXP);
    Rcpp::traits::input_parameter< double >::type node3(node3SEXP);
    Rcpp::traits::input_parameter< double >::type node4(node4SEXP);
    Rcpp::traits::input_parameter< double >::type node5(node5SEXP);
    Rcpp::traits::input_parameter< double >::type node6(node6SEXP);
    Rcpp::traits::input_parameter< int >::type X_size(X_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(Pi_grad(A_tmp, X_tmp, A_type, beta, lambda, node1, node2, node3, node4, node5, node6, X_size));
    return rcpp_result_gen;
END_RCPP
}
// mu
double mu(const int A_tmp, const arma::rowvec& X_tmp, const arma::colvec& A_type, const arma::mat& beta, double lambda, double node1, double node2, double node3, double node4, double node5, double node6);
RcppExport SEXP _proximalDTR_mu(SEXP A_tmpSEXP, SEXP X_tmpSEXP, SEXP A_typeSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP node1SEXP, SEXP node2SEXP, SEXP node3SEXP, SEXP node4SEXP, SEXP node5SEXP, SEXP node6SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type A_tmp(A_tmpSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X_tmp(X_tmpSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type A_type(A_typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type node1(node1SEXP);
    Rcpp::traits::input_parameter< double >::type node2(node2SEXP);
    Rcpp::traits::input_parameter< double >::type node3(node3SEXP);
    Rcpp::traits::input_parameter< double >::type node4(node4SEXP);
    Rcpp::traits::input_parameter< double >::type node5(node5SEXP);
    Rcpp::traits::input_parameter< double >::type node6(node6SEXP);
    rcpp_result_gen = Rcpp::wrap(mu(A_tmp, X_tmp, A_type, beta, lambda, node1, node2, node3, node4, node5, node6));
    return rcpp_result_gen;
END_RCPP
}
// mu_grad_beta
arma::rowvec mu_grad_beta(const int A_tmp, const arma::rowvec& X_tmp, const arma::colvec& A_type, const arma::mat& beta, double lambda, double node1, double node2, double node3, double node4, double node5, double node6, int X_size);
RcppExport SEXP _proximalDTR_mu_grad_beta(SEXP A_tmpSEXP, SEXP X_tmpSEXP, SEXP A_typeSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP node1SEXP, SEXP node2SEXP, SEXP node3SEXP, SEXP node4SEXP, SEXP node5SEXP, SEXP node6SEXP, SEXP X_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type A_tmp(A_tmpSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X_tmp(X_tmpSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type A_type(A_typeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type node1(node1SEXP);
    Rcpp::traits::input_parameter< double >::type node2(node2SEXP);
    Rcpp::traits::input_parameter< double >::type node3(node3SEXP);
    Rcpp::traits::input_parameter< double >::type node4(node4SEXP);
    Rcpp::traits::input_parameter< double >::type node5(node5SEXP);
    Rcpp::traits::input_parameter< double >::type node6(node6SEXP);
    Rcpp::traits::input_parameter< int >::type X_size(X_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(mu_grad_beta(A_tmp, X_tmp, A_type, beta, lambda, node1, node2, node3, node4, node5, node6, X_size));
    return rcpp_result_gen;
END_RCPP
}
// lagr_lambda
double lagr_lambda(const arma::rowvec& X_tmp, double lambda, const arma::mat& omega);
RcppExport SEXP _proximalDTR_lagr_lambda(SEXP X_tmpSEXP, SEXP lambdaSEXP, SEXP omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X_tmp(X_tmpSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type omega(omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(lagr_lambda(X_tmp, lambda, omega));
    return rcpp_result_gen;
END_RCPP
}
// lagr_lambda_grad
arma::rowvec lagr_lambda_grad(const arma::rowvec& X_tmp, double lambda, const arma::mat& omega);
RcppExport SEXP _proximalDTR_lagr_lambda_grad(SEXP X_tmpSEXP, SEXP lambdaSEXP, SEXP omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type X_tmp(X_tmpSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type omega(omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(lagr_lambda_grad(X_tmp, lambda, omega));
    return rcpp_result_gen;
END_RCPP
}
// loss_grad
List loss_grad(const arma::mat& train, const arma::mat& beta, const arma::mat& omega, const arma::colvec& A_type, double eta_b, double eta_omg, double gamma, double lambda, const arma::mat& kernel_mat, double node1, double node2, double node3, double node4, double node5, double node6, int X_size);
RcppExport SEXP _proximalDTR_loss_grad(SEXP trainSEXP, SEXP betaSEXP, SEXP omegaSEXP, SEXP A_typeSEXP, SEXP eta_bSEXP, SEXP eta_omgSEXP, SEXP gammaSEXP, SEXP lambdaSEXP, SEXP kernel_matSEXP, SEXP node1SEXP, SEXP node2SEXP, SEXP node3SEXP, SEXP node4SEXP, SEXP node5SEXP, SEXP node6SEXP, SEXP X_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type train(trainSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type A_type(A_typeSEXP);
    Rcpp::traits::input_parameter< double >::type eta_b(eta_bSEXP);
    Rcpp::traits::input_parameter< double >::type eta_omg(eta_omgSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kernel_mat(kernel_matSEXP);
    Rcpp::traits::input_parameter< double >::type node1(node1SEXP);
    Rcpp::traits::input_parameter< double >::type node2(node2SEXP);
    Rcpp::traits::input_parameter< double >::type node3(node3SEXP);
    Rcpp::traits::input_parameter< double >::type node4(node4SEXP);
    Rcpp::traits::input_parameter< double >::type node5(node5SEXP);
    Rcpp::traits::input_parameter< double >::type node6(node6SEXP);
    Rcpp::traits::input_parameter< int >::type X_size(X_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(loss_grad(train, beta, omega, A_type, eta_b, eta_omg, gamma, lambda, kernel_mat, node1, node2, node3, node4, node5, node6, X_size));
    return rcpp_result_gen;
END_RCPP
}
// kernel_obj
double kernel_obj(const arma::mat& train, const arma::mat& beta, const arma::mat& omega, const arma::colvec& A_type, double gamma, double lambda, const arma::mat& kernel_mat, double node1, double node2, double node3, double node4, double node5, double node6, int X_size);
RcppExport SEXP _proximalDTR_kernel_obj(SEXP trainSEXP, SEXP betaSEXP, SEXP omegaSEXP, SEXP A_typeSEXP, SEXP gammaSEXP, SEXP lambdaSEXP, SEXP kernel_matSEXP, SEXP node1SEXP, SEXP node2SEXP, SEXP node3SEXP, SEXP node4SEXP, SEXP node5SEXP, SEXP node6SEXP, SEXP X_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type train(trainSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type A_type(A_typeSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kernel_mat(kernel_matSEXP);
    Rcpp::traits::input_parameter< double >::type node1(node1SEXP);
    Rcpp::traits::input_parameter< double >::type node2(node2SEXP);
    Rcpp::traits::input_parameter< double >::type node3(node3SEXP);
    Rcpp::traits::input_parameter< double >::type node4(node4SEXP);
    Rcpp::traits::input_parameter< double >::type node5(node5SEXP);
    Rcpp::traits::input_parameter< double >::type node6(node6SEXP);
    Rcpp::traits::input_parameter< int >::type X_size(X_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_obj(train, beta, omega, A_type, gamma, lambda, kernel_mat, node1, node2, node3, node4, node5, node6, X_size));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_proximalDTR_KernelDist_single", (DL_FUNC) &_proximalDTR_KernelDist_single, 5},
    {"_proximalDTR_EpanKernelDist_single", (DL_FUNC) &_proximalDTR_EpanKernelDist_single, 2},
    {"_proximalDTR_Basis_func", (DL_FUNC) &_proximalDTR_Basis_func, 9},
    {"_proximalDTR_V_func", (DL_FUNC) &_proximalDTR_V_func, 10},
    {"_proximalDTR_V_grad", (DL_FUNC) &_proximalDTR_V_grad, 11},
    {"_proximalDTR_Pi_policy", (DL_FUNC) &_proximalDTR_Pi_policy, 11},
    {"_proximalDTR_Pi_grad", (DL_FUNC) &_proximalDTR_Pi_grad, 12},
    {"_proximalDTR_mu", (DL_FUNC) &_proximalDTR_mu, 11},
    {"_proximalDTR_mu_grad_beta", (DL_FUNC) &_proximalDTR_mu_grad_beta, 12},
    {"_proximalDTR_lagr_lambda", (DL_FUNC) &_proximalDTR_lagr_lambda, 3},
    {"_proximalDTR_lagr_lambda_grad", (DL_FUNC) &_proximalDTR_lagr_lambda_grad, 3},
    {"_proximalDTR_loss_grad", (DL_FUNC) &_proximalDTR_loss_grad, 16},
    {"_proximalDTR_kernel_obj", (DL_FUNC) &_proximalDTR_kernel_obj, 14},
    {NULL, NULL, 0}
};

RcppExport void R_init_proximalDTR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
